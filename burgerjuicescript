local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ReplicatedFirst   = game:GetService("ReplicatedFirst")
local UserInputService  = game:GetService("UserInputService")
local RunService        = game:GetService("RunService")
local Lighting          = game:GetService("Lighting")
local Players           = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local PlayerGui   = LocalPlayer.PlayerGui
local Mouse       = LocalPlayer:GetMouse()
local Camera      = workspace.CurrentCamera

local Context = game:GetService("ScriptContext")
for _, Connection in next, getconnections(Context.Error) do
    Connection:Disable()
end

local Library = loadstring(game:HttpGetAsync('https://raw.githubusercontent.com/Just-Egg-Salad/roblox-scripts/main/uwuware'))()

local Window = Library:CreateWindow("Crimskid")

local folder1 = Window:AddFolder('Main')
folder1:AddButton({text = 'Speed', callback = function()    
    loadstring(game:HttpGet("https://raw.githubusercontent.com/angeloX041/Speedc/main/SuperSpeedC", true))()
end})

folder1:AddButton({text = 'Aimlock', callback = function() 
    loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Hyotinhofofinho/s1mple/main/LIXO"))()
end})


local folder2 = Window:AddFolder('Visuals')
folder2:AddSlider({text = 'FOV', min = 70, max = 120, callback = function(v) 
    workspace.CurrentCamera.FieldOfView = v 
end})

folder2:AddButton({text = 'Plastic Textures', callback = function() 
    workspace:FindFirstChildOfClass('Terrain').WaterWaveSize = 0
	workspace:FindFirstChildOfClass('Terrain').WaterWaveSpeed = 0
	workspace:FindFirstChildOfClass('Terrain').WaterReflectance = 0
	workspace:FindFirstChildOfClass('Terrain').WaterTransparency = 0
	game:GetService("Lighting").GlobalShadows = false
	settings().Rendering.QualityLevel = 1
	for i,v in pairs(game:GetDescendants()) do
		if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
			v.Material = "Plastic"
			v.Reflectance = 0
		elseif v:IsA("Decal") then
			v.Transparency = 1
		elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
			v.Lifetime = NumberRange.new(0)
		elseif v:IsA("Explosion") then
			v.BlastPressure = 1
			v.BlastRadius = 1
		end
	end
	for i,v in pairs(game:GetService("Lighting"):GetDescendants()) do
		if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
			v.Enabled = false
		end
	end
	workspace.DescendantAdded:Connect(function(child)
		coroutine.wrap(function()
			if child:IsA('ForceField') then
				game:GetService('RunService').Heartbeat:Wait()
				child:Destroy()
			elseif child:IsA('Sparkles') then
				game:GetService('RunService').Heartbeat:Wait()
				child:Destroy()
			elseif child:IsA('Smoke') or child:IsA('Fire') then
				game:GetService('RunService').Heartbeat:Wait()
				child:Destroy()
			end
		end)()
	end)
end})

folder2:AddButton({text = 'Blue Shaders', callback = function() 
    local Lighting = game:GetService("Lighting");


    local Enabled = true
    
    
    local TerrainPlusEnabled = true
    local BetterLightingEnabled = true
    
    
    
    
    
    
    function SetupLighting_()
    
    
     
    
    
     local ColorCorrection = Instance.new("ColorCorrectionEffect")
     local SunRays = Instance.new("SunRaysEffect")
     local Blur = Instance.new("BlurEffect")
     
    
    
     local Atmosphere = Instance.new("Atmosphere")
     local Sky = Instance.new("Sky")
     local Clouds = Instance.new("Clouds")
     
    
    
     Lighting.Brightness = 1
     Lighting.EnvironmentDiffuseScale = .2
     Lighting.EnvironmentSpecularScale = .82
     SunRays.Parent = Lighting
     Atmosphere.Parent = Lighting
     Sky.Parent = Lighting
     Blur.Size = 3.921
     Blur.Parent = Lighting
     ColorCorrection.Parent = Lighting
     ColorCorrection.Saturation = .092
     Clouds.Parent = Lighting
    end
    
    
    
    
    function SetupTerrain()
     local Terrain = game.Workspace.Terrain;
     Terrain.WaterTransparency = 1
     Terrain.WaterReflectance = 1
    end
    
    
    if Enabled then
     if TerrainPlusEnabled then
      SetupTerrain()
      warn("Loaded Better Terrain")
     end
     if BetterLightingEnabled then
      SetupLighting_()
      warn("Loaded Lighting+")
     end
    elseif not Enabled then
     error("Script Disabled.")
     return false
    end
    
    
    
    
    script.Parent = game:GetService("ServerScriptService")
end})

local folder3 = Window:AddFolder('Character')

folder3:AddButton({text = 'Headless', callback = function() 
    loadstring(game:HttpGet('https://raw.githubusercontent.com/carlcoded/pro/main/headlessperma'))()
end})









local ESP = Library:CreateWindow("ESP")
ESP:AddToggle({
    text = "Enabled",
})
ESP:AddToggle({
    text = "Box",
})
ESP:AddToggle({
    text = "Name",
})
ESP:AddToggle({
    text = "Health",
})
ESP:AddToggle({
    text = "Weapon",
})

Library:Init()

local PlayerDrawings = {}
local Utility        = {}

Utility.Settings = {
    Line = {
        Thickness = 1,
        Color = Color3.fromRGB(0, 255, 0)
    },
    Text = {
        Size = 13,
        Center = true,
        Outline = true,
        Font = Drawing.Fonts.Plex,
        Color = Color3.fromRGB(255, 255, 255)
    },
    Square = {
        Thickness = 1,
        Color = Color3.fromRGB(255, 255, 255),
        Filled = false,
    },
    Triangle = {
        Color = Color3.fromRGB(255, 255, 255),
        Filled = true,
        Visible = false,
        Thickness = 1,
    }
}
function Utility.New(Type, Outline, Name)
    local drawing = Drawing.new(Type)
    for i, v in pairs(Utility.Settings[Type]) do
        drawing[i] = v
    end
    if Outline then
        drawing.Color = Color3.new(0,0,0)
        drawing.Thickness = 3
    end
    return drawing
end
function Utility.Add(Player)
    if not PlayerDrawings[Player] then
        PlayerDrawings[Player] = {
            Name = Utility.New("Text", nil, "Name"),
            Tool = Utility.New("Text", nil, "Tool"),
            BoxOutline = Utility.New("Square", true, "BoxOutline"),
            Box = Utility.New("Square", nil, "Box"),
            HealthOutline = Utility.New("Line", true, "HealthOutline"),
            Health = Utility.New("Line", nil, "Health")
        }
    end
end

for _,Player in pairs(Players:GetPlayers()) do
    if Player ~= LocalPlayer then
        Utility.Add(Player)
    end
end
Players.PlayerAdded:Connect(Utility.Add)
Players.PlayerRemoving:Connect(function(Player)
    if PlayerDrawings[Player] then
        for i,v in pairs(PlayerDrawings[Player]) do
            if v then
                v:Remove()
            end
        end

        PlayerDrawings[Player] = nil
    end
end)

local ESPLoop = RunService:BindToRenderStep("updateESP", 205, function()
    for _,Player in pairs (Players:GetPlayers()) do
        local PlayerDrawing = PlayerDrawings[Player]
        if not PlayerDrawing then continue end

        for _,Drawing in pairs (PlayerDrawing) do
            Drawing.Visible = false
        end

        if not Library.flags.Enabled then
            return
        end

        local Character = Player.Character
        local RootPart, Humanoid = Character and Character:FindFirstChild("HumanoidRootPart"), Character and Character:FindFirstChildOfClass("Humanoid")
        if not Character or not RootPart or not Humanoid then continue end

        local DistanceFromCharacter = (Camera.CFrame.Position - RootPart.Position).Magnitude

        local Pos, OnScreen = Camera:WorldToViewportPoint(RootPart.Position)
        if OnScreen then
            local Size           = (Camera:WorldToViewportPoint(RootPart.Position - Vector3.new(0, 3, 0)).Y - Camera:WorldToViewportPoint(RootPart.Position + Vector3.new(0, 2.6, 0)).Y) / 2
            local BoxSize        = Vector2.new(math.floor(Size * 1.5), math.floor(Size * 1.9))
            local BoxPos         = Vector2.new(math.floor(Pos.X - Size * 1.5 / 2), math.floor(Pos.Y - Size * 1.6 / 2))
    
            local Name           = PlayerDrawing.Name
            local Tool           = PlayerDrawing.Tool
            local Box            = PlayerDrawing.Box
            local BoxOutline     = PlayerDrawing.BoxOutline
            local Health         = PlayerDrawing.Health
            local HealthOutline  = PlayerDrawing.HealthOutline
    
            if Library.flags.Box then
                Box.Size = BoxSize
                Box.Position = BoxPos
                Box.Visible = true
                Box.Color = Color3.fromRGB(255, 255, 255)
                BoxOutline.Size = BoxSize
                BoxOutline.Position = BoxPos
                BoxOutline.Visible = true
            end
    
            if Library.flags.Health then
                Health.From = Vector2.new((BoxPos.X - 5), BoxPos.Y + BoxSize.Y)
                Health.To = Vector2.new(Health.From.X, Health.From.Y - (Humanoid.Health / Humanoid.MaxHealth) * BoxSize.Y)
                Health.Color = Color3.fromRGB(0, 255, 0)
                Health.Visible = true
    
                HealthOutline.From = Vector2.new(Health.From.X, BoxPos.Y + BoxSize.Y + 1)
                HealthOutline.To = Vector2.new(Health.From.X, (Health.From.Y - 1 * BoxSize.Y) -1)
                HealthOutline.Visible = true
            end
    
            if Library.flags.Name then
                Name.Text = "["..Player.Name.."]"
                Name.Position = Vector2.new(BoxSize.X / 2 + BoxPos.X, BoxPos.Y - 16)
                Name.Color = Color3.fromRGB(255, 255, 255)
                Name.Visible = true
            end
    
            if Library.flags.Weapon then
                local BottomOffset = BoxSize.Y + BoxPos.Y + 1
                local Equipped = Player.Character:FindFirstChildOfClass("Tool") and Player.Character:FindFirstChildOfClass("Tool").Name or "None"
                Tool.Text = "["..Equipped.."]"
                Tool.Position = Vector2.new(BoxSize.X / 2 + BoxPos.X, BottomOffset)
                Tool.Color = Color3.fromRGB(255, 255, 255)
                Tool.Visible = true
                BottomOffset = BottomOffset + 15
            end
        end
    end
end)



